# PySNMP SMI module. Autogenerated from smidump -f python TRAFFIC-MIB
# by libsmi2pysnmp-0.1.3 at Sat Nov 15 20:44:25 2014,
# Python version sys.version_info(major=2, minor=7, micro=6, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter64, Integer32, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, enterprises, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "enterprises")
( TimeInterval, TimeStamp, ) = mibBuilder.importSymbols("SNMPv2-TC", "TimeInterval", "TimeStamp")

# Objects

traffic = ModuleIdentity((1, 3, 6, 1, 4, 1, 12619)).setRevisions(("2014-08-30 00:00",))
if mibBuilder.loadTexts: traffic.setOrganization("inf.ufrgs.br")
if mibBuilder.loadTexts: traffic.setContactInfo("email:    matheusdot@gmail.com")
if mibBuilder.loadTexts: traffic.setDescription("Top-level infrastructure of the Traffic Management System MIB tree")
system = MibIdentifier((1, 3, 6, 1, 4, 1, 12619, 1))
sysID = MibScalar((1, 3, 6, 1, 4, 1, 12619, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysID.setDescription("Identifier used by the manager to easily recognize a device")
sysLatitude = MibScalar((1, 3, 6, 1, 4, 1, 12619, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLatitude.setDescription("Latitude of the device, which must be a string representing a fixed point number with precision 6.")
sysLongitude = MibScalar((1, 3, 6, 1, 4, 1, 12619, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLongitude.setDescription("Longitude of the device, which must be a string representing a fixed point number with precision 6.")
sysType = MibScalar((1, 3, 6, 1, 4, 1, 12619, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysType.setDescription("Type of the system. It can be: 'semaphore', 'carCounter', \n'radar', 'barrier', 'lightBulb', 'lightSensor', 'weatherSensor', \n'digitalBoard', 'accidentReporter'.")
statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 12619, 2))
statRadar = MibIdentifier((1, 3, 6, 1, 4, 1, 12619, 2, 1))
radMultas = MibScalar((1, 3, 6, 1, 4, 1, 12619, 2, 1, 1), Counter64().clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: radMultas.setDescription("Number of fines registred by this device")
radMaxSamples = MibScalar((1, 3, 6, 1, 4, 1, 12619, 2, 1, 2), Unsigned32().clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: radMaxSamples.setDescription("Max number of fines this device can store.")
radLimitSamples = MibScalar((1, 3, 6, 1, 4, 1, 12619, 2, 1, 3), Unsigned32().clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radLimitSamples.setDescription("Limit of fines this device will store. The value is\nsetted by the manager and can be at most equal to radMaxSamples")
radMultaTable = MibTable((1, 3, 6, 1, 4, 1, 12619, 2, 1, 4))
if mibBuilder.loadTexts: radMultaTable.setDescription("This table contains all fines stored by the device")
radMultaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12619, 2, 1, 4, 1)).setIndexNames((0, "TRAFFIC-MIB", "radMultaID"))
if mibBuilder.loadTexts: radMultaEntry.setDescription("A row describing a fine")
radMultaID = MibTableColumn((1, 3, 6, 1, 4, 1, 12619, 2, 1, 4, 1, 2), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: radMultaID.setDescription("Fine identifier")
radMultaSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12619, 2, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radMultaSpeed.setDescription("Speed registred by the device")
radMultaTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 12619, 2, 1, 4, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radMultaTimestamp.setDescription("Timestamp of the fine")
statCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 12619, 2, 2))
cntCars = MibScalar((1, 3, 6, 1, 4, 1, 12619, 2, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntCars.setDescription("Number of cars this device has registred since its on")
statSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 12619, 2, 3))
sensorWeather = MibIdentifier((1, 3, 6, 1, 4, 1, 12619, 2, 3, 1))
weaSamples = MibScalar((1, 3, 6, 1, 4, 1, 12619, 2, 3, 1, 1), Counter64().clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: weaSamples.setDescription("Number of samples taken by the device")
weaMaxSamples = MibScalar((1, 3, 6, 1, 4, 1, 12619, 2, 3, 1, 2), Unsigned32().clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: weaMaxSamples.setDescription("Max number of samples this device can  store")
weaLimitSamples = MibScalar((1, 3, 6, 1, 4, 1, 12619, 2, 3, 1, 3), Unsigned32().clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: weaLimitSamples.setDescription("Limit of samples this device will store. This value is setted by \nthe manager and can be at most equals to weaMaxSamples")
weaSampleTable = MibTable((1, 3, 6, 1, 4, 1, 12619, 2, 3, 1, 4))
if mibBuilder.loadTexts: weaSampleTable.setDescription("This table contains all the samples stored in the device")
weaSampleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12619, 2, 3, 1, 4, 1)).setIndexNames((0, "TRAFFIC-MIB", "weaSampleID"))
if mibBuilder.loadTexts: weaSampleEntry.setDescription("A row describing a sample")
weaSampleID = MibTableColumn((1, 3, 6, 1, 4, 1, 12619, 2, 3, 1, 4, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: weaSampleID.setDescription("Sample identifier")
weaSampleHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 12619, 2, 3, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: weaSampleHumidity.setDescription("Humidity registred by the device in one sample")
weaSampleRainSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12619, 2, 3, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: weaSampleRainSpeed.setDescription("Rain speed registred by the device in one sample")
weaSampleTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 12619, 2, 3, 1, 4, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: weaSampleTimestamp.setDescription("Timestamp of the sample")
sensorLight = MibIdentifier((1, 3, 6, 1, 4, 1, 12619, 2, 3, 2))
lightSamples = MibScalar((1, 3, 6, 1, 4, 1, 12619, 2, 3, 2, 1), Counter64().clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lightSamples.setDescription("Number of samples taken by the device")
lightMaxSamples = MibScalar((1, 3, 6, 1, 4, 1, 12619, 2, 3, 2, 2), Unsigned32().clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lightMaxSamples.setDescription("Max number of samples this device can  store")
lightLimitSamples = MibScalar((1, 3, 6, 1, 4, 1, 12619, 2, 3, 2, 3), Unsigned32().clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lightLimitSamples.setDescription("Limit of samples this device will store. This value is setted by \nthe manager and can be at most equals to weaMaxSamples")
lightSampleTable = MibTable((1, 3, 6, 1, 4, 1, 12619, 2, 3, 2, 4))
if mibBuilder.loadTexts: lightSampleTable.setDescription("This table contains all the samples stored by the device")
lightSampleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12619, 2, 3, 2, 4, 1)).setIndexNames((0, "TRAFFIC-MIB", "lightSampleID"))
if mibBuilder.loadTexts: lightSampleEntry.setDescription("A row describing a sample")
lightSampleID = MibTableColumn((1, 3, 6, 1, 4, 1, 12619, 2, 3, 2, 4, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: lightSampleID.setDescription("Sample identifier")
lightSampleIntensity = MibTableColumn((1, 3, 6, 1, 4, 1, 12619, 2, 3, 2, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lightSampleIntensity.setDescription("Light intensity registred by the device in one sample")
lightSampleTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 12619, 2, 3, 2, 4, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lightSampleTimestamp.setDescription("Timestamp of the sample")
statAccidents = MibIdentifier((1, 3, 6, 1, 4, 1, 12619, 2, 4))
acOcorrences = MibScalar((1, 3, 6, 1, 4, 1, 12619, 2, 4, 1), Counter64().clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: acOcorrences.setDescription("Number of accidents registred by the device")
acMaxOcorrences = MibScalar((1, 3, 6, 1, 4, 1, 12619, 2, 4, 2), Unsigned32().clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: acMaxOcorrences.setDescription("Max number of accidents this device can keep stored")
acLimitOcorrences = MibScalar((1, 3, 6, 1, 4, 1, 12619, 2, 4, 3), Unsigned32().clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLimitOcorrences.setDescription("Limit of accidents this device will keep stored. This value is setted by \nthe manager and can be at most equals to acMaxOcorrences")
acOcorrenceTable = MibTable((1, 3, 6, 1, 4, 1, 12619, 2, 4, 4))
if mibBuilder.loadTexts: acOcorrenceTable.setDescription("This table contains all the accidents stored in the device")
acOcorrenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12619, 2, 4, 4, 1)).setIndexNames((0, "TRAFFIC-MIB", "acOcorrenceID"))
if mibBuilder.loadTexts: acOcorrenceEntry.setDescription("A row describing an accident")
acOcorrenceID = MibTableColumn((1, 3, 6, 1, 4, 1, 12619, 2, 4, 4, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: acOcorrenceID.setDescription("Accident identifier")
acOcorrenceGravity = MibTableColumn((1, 3, 6, 1, 4, 1, 12619, 2, 4, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acOcorrenceGravity.setDescription("Gravity of the accident")
acOcorrenceLatitude = MibTableColumn((1, 3, 6, 1, 4, 1, 12619, 2, 4, 4, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acOcorrenceLatitude.setDescription("Latitude of the accident, which must be a string representing a fixed point number with precision 6.")
acOcorrenceLongitude = MibTableColumn((1, 3, 6, 1, 4, 1, 12619, 2, 4, 4, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acOcorrenceLongitude.setDescription("Longitude of the accident, which must be a string representing a fixed point number with precision 6.")
acOcorrenceTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 12619, 2, 4, 4, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acOcorrenceTimestamp.setDescription("Timestamp of the accident")
helpers = MibIdentifier((1, 3, 6, 1, 4, 1, 12619, 3))
helpSemaphore = MibIdentifier((1, 3, 6, 1, 4, 1, 12619, 3, 1))
semStatus = MibScalar((1, 3, 6, 1, 4, 1, 12619, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: semStatus.setDescription("Status of the device. It can bem 'green', 'yellow' or 'red'")
semTimeToRed = MibScalar((1, 3, 6, 1, 4, 1, 12619, 3, 1, 2), TimeInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: semTimeToRed.setDescription("Time the device will stay green.")
semTimeToGreen = MibScalar((1, 3, 6, 1, 4, 1, 12619, 3, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: semTimeToGreen.setDescription("Time the device will stay red.")
helpLightBulb = MibIdentifier((1, 3, 6, 1, 4, 1, 12619, 3, 2))
lightBulbIntensity = MibScalar((1, 3, 6, 1, 4, 1, 12619, 3, 2, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lightBulbIntensity.setDescription("Light intensity of the device. This should be a value between 0 and 100.")
helpDigitalBoard = MibIdentifier((1, 3, 6, 1, 4, 1, 12619, 3, 3))
digNumLines = MibScalar((1, 3, 6, 1, 4, 1, 12619, 3, 3, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digNumLines.setDescription("Number of lines this device can display")
digColsPerLine = MibScalar((1, 3, 6, 1, 4, 1, 12619, 3, 3, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digColsPerLine.setDescription("Numbers of characters this device can display per line.")
digMessageTable = MibTable((1, 3, 6, 1, 4, 1, 12619, 3, 3, 3))
if mibBuilder.loadTexts: digMessageTable.setDescription("This table stores the characters being \ndisplayed in each line of the device.")
digMessageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12619, 3, 3, 3, 1)).setIndexNames((0, "TRAFFIC-MIB", "digMessageRow"))
if mibBuilder.loadTexts: digMessageEntry.setDescription("A row describing the text being displayed on a line of the device.")
digMessageRow = MibTableColumn((1, 3, 6, 1, 4, 1, 12619, 3, 3, 3, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: digMessageRow.setDescription("Row number of the line in the device.")
digMessageText = MibTableColumn((1, 3, 6, 1, 4, 1, 12619, 3, 3, 3, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digMessageText.setDescription("Text of that line in the device.")
trafficConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 12619, 4))
trafficCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 12619, 4, 1))
trafficGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 12619, 4, 2))

# Augmentions

# Groups

systemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12619, 4, 2, 1)).setObjects(*(("TRAFFIC-MIB", "sysLatitude"), ("TRAFFIC-MIB", "sysID"), ("TRAFFIC-MIB", "sysLongitude"), ("TRAFFIC-MIB", "sysType"), ) )
if mibBuilder.loadTexts: systemGroup.setDescription("This group represent all objects common to any device implementing that MIB")
statRadioGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12619, 4, 2, 2)).setObjects(*(("TRAFFIC-MIB", "radLimitSamples"), ("TRAFFIC-MIB", "radMultaSpeed"), ("TRAFFIC-MIB", "radMultaTimestamp"), ("TRAFFIC-MIB", "radMultas"), ("TRAFFIC-MIB", "radMaxSamples"), ) )
if mibBuilder.loadTexts: statRadioGroup.setDescription("This group is used only by devices which sysType is either 'radio' or 'barrier'.")
statCounterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12619, 4, 2, 3)).setObjects(*(("TRAFFIC-MIB", "cntCars"), ) )
if mibBuilder.loadTexts: statCounterGroup.setDescription("This group is used only by devices which sysType is either 'radio', 'barrier' or 'carCounter'")
sensorWeatherGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12619, 4, 2, 4)).setObjects(*(("TRAFFIC-MIB", "weaSamples"), ("TRAFFIC-MIB", "weaSampleHumidity"), ("TRAFFIC-MIB", "weaSampleTimestamp"), ("TRAFFIC-MIB", "weaLimitSamples"), ("TRAFFIC-MIB", "weaSampleRainSpeed"), ("TRAFFIC-MIB", "weaMaxSamples"), ) )
if mibBuilder.loadTexts: sensorWeatherGroup.setDescription("This group is used only by devices which sysType is 'weatherSensor'")
sensorLightGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12619, 4, 2, 5)).setObjects(*(("TRAFFIC-MIB", "lightSamples"), ("TRAFFIC-MIB", "lightSampleIntensity"), ("TRAFFIC-MIB", "lightMaxSamples"), ("TRAFFIC-MIB", "lightSampleTimestamp"), ("TRAFFIC-MIB", "lightLimitSamples"), ) )
if mibBuilder.loadTexts: sensorLightGroup.setDescription("This group is used only by devices which sysType is 'lightSensor'")
statAccidentsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12619, 4, 2, 6)).setObjects(*(("TRAFFIC-MIB", "acOcorrences"), ("TRAFFIC-MIB", "acOcorrenceLatitude"), ("TRAFFIC-MIB", "acOcorrenceGravity"), ("TRAFFIC-MIB", "acOcorrenceTimestamp"), ("TRAFFIC-MIB", "acLimitOcorrences"), ("TRAFFIC-MIB", "acMaxOcorrences"), ("TRAFFIC-MIB", "acOcorrenceLongitude"), ) )
if mibBuilder.loadTexts: statAccidentsGroup.setDescription("This group is used only by devices which sysType is 'accidentReporter'")
helpSemaphoreGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12619, 4, 2, 7)).setObjects(*(("TRAFFIC-MIB", "semTimeToGreen"), ("TRAFFIC-MIB", "semTimeToRed"), ("TRAFFIC-MIB", "semStatus"), ) )
if mibBuilder.loadTexts: helpSemaphoreGroup.setDescription("This group is used only by devices which sysType is 'semaphore'")
helpLightBulbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12619, 4, 2, 8)).setObjects(*(("TRAFFIC-MIB", "lightBulbIntensity"), ) )
if mibBuilder.loadTexts: helpLightBulbGroup.setDescription("This group is used only by devices which sysType is 'lightBulb'")
helpDigitalBoardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12619, 4, 2, 9)).setObjects(*(("TRAFFIC-MIB", "digNumLines"), ("TRAFFIC-MIB", "digMessageText"), ("TRAFFIC-MIB", "digColsPerLine"), ) )
if mibBuilder.loadTexts: helpDigitalBoardGroup.setDescription("This group is used only by devices which sysType is 'digitalBoard'")

# Compliances

trafficCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 12619, 4, 1, 1)).setObjects(*(("TRAFFIC-MIB", "sensorWeatherGroup"), ("TRAFFIC-MIB", "systemGroup"), ("TRAFFIC-MIB", "statRadioGroup"), ("TRAFFIC-MIB", "statCounterGroup"), ("TRAFFIC-MIB", "statAccidentsGroup"), ("TRAFFIC-MIB", "helpDigitalBoardGroup"), ("TRAFFIC-MIB", "sensorLightGroup"), ("TRAFFIC-MIB", "helpSemaphoreGroup"), ("TRAFFIC-MIB", "helpLightBulbGroup"), ) )
if mibBuilder.loadTexts: trafficCompliance.setDescription("The compliance of all the groups in the MIB")

# Exports

# Module identity
mibBuilder.exportSymbols("TRAFFIC-MIB", PYSNMP_MODULE_ID=traffic)

# Objects
mibBuilder.exportSymbols("TRAFFIC-MIB", traffic=traffic, system=system, sysID=sysID, sysLatitude=sysLatitude, sysLongitude=sysLongitude, sysType=sysType, statistics=statistics, statRadar=statRadar, radMultas=radMultas, radMaxSamples=radMaxSamples, radLimitSamples=radLimitSamples, radMultaTable=radMultaTable, radMultaEntry=radMultaEntry, radMultaID=radMultaID, radMultaSpeed=radMultaSpeed, radMultaTimestamp=radMultaTimestamp, statCounter=statCounter, cntCars=cntCars, statSensors=statSensors, sensorWeather=sensorWeather, weaSamples=weaSamples, weaMaxSamples=weaMaxSamples, weaLimitSamples=weaLimitSamples, weaSampleTable=weaSampleTable, weaSampleEntry=weaSampleEntry, weaSampleID=weaSampleID, weaSampleHumidity=weaSampleHumidity, weaSampleRainSpeed=weaSampleRainSpeed, weaSampleTimestamp=weaSampleTimestamp, sensorLight=sensorLight, lightSamples=lightSamples, lightMaxSamples=lightMaxSamples, lightLimitSamples=lightLimitSamples, lightSampleTable=lightSampleTable, lightSampleEntry=lightSampleEntry, lightSampleID=lightSampleID, lightSampleIntensity=lightSampleIntensity, lightSampleTimestamp=lightSampleTimestamp, statAccidents=statAccidents, acOcorrences=acOcorrences, acMaxOcorrences=acMaxOcorrences, acLimitOcorrences=acLimitOcorrences, acOcorrenceTable=acOcorrenceTable, acOcorrenceEntry=acOcorrenceEntry, acOcorrenceID=acOcorrenceID, acOcorrenceGravity=acOcorrenceGravity, acOcorrenceLatitude=acOcorrenceLatitude, acOcorrenceLongitude=acOcorrenceLongitude, acOcorrenceTimestamp=acOcorrenceTimestamp, helpers=helpers, helpSemaphore=helpSemaphore, semStatus=semStatus, semTimeToRed=semTimeToRed, semTimeToGreen=semTimeToGreen, helpLightBulb=helpLightBulb, lightBulbIntensity=lightBulbIntensity, helpDigitalBoard=helpDigitalBoard, digNumLines=digNumLines, digColsPerLine=digColsPerLine, digMessageTable=digMessageTable, digMessageEntry=digMessageEntry, digMessageRow=digMessageRow, digMessageText=digMessageText, trafficConformance=trafficConformance, trafficCompliances=trafficCompliances, trafficGroups=trafficGroups)

# Groups
mibBuilder.exportSymbols("TRAFFIC-MIB", systemGroup=systemGroup, statRadioGroup=statRadioGroup, statCounterGroup=statCounterGroup, sensorWeatherGroup=sensorWeatherGroup, sensorLightGroup=sensorLightGroup, statAccidentsGroup=statAccidentsGroup, helpSemaphoreGroup=helpSemaphoreGroup, helpLightBulbGroup=helpLightBulbGroup, helpDigitalBoardGroup=helpDigitalBoardGroup)

# Compliances
mibBuilder.exportSymbols("TRAFFIC-MIB", trafficCompliance=trafficCompliance)
